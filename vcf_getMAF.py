#!/usr/bin/env python3

import sys
# import statistics
from cyvcf2 import VCF

def parse_vcf_bcftools(handle, minQUAL=30):
    data = []
    for var in handle:
        # skip INDELs
        if var.is_indel:
            continue
        # filter low QUAL
        if var.QUAL < minQUAL:
            continue
        # count only 0/1 allele, DP4 is not suitable for 1/2
        GT = var.genotypes[0]  # first sample
        if not (GT[0] == 0 and GT[1] == 1):
            continue

        DP = var.INFO['DP']
        DP4 = var.INFO['DP4']  # tuple
        # print(DP, DP4)
        MAF = (DP4[0]+DP4[1])/sum(DP4)
        MAF = 1 - MAF if MAF > 0.5 else MAF
        data.append((
            var.CHROM,
            var.end,
            DP,
            DP4[0], DP4[1], DP4[2], DP4[3],
            MAF
        ))
    return data

def parse_vcf_varscan2(handle, minQUAL=30):
    data = []
    for var in handle:
        # skip INDELs
        if var.is_indel:
            continue
        # filter low QUAL
        QUAL = var.format('GQ')[0][0]
        if QUAL < minQUAL:
            continue
        # count only 0/1 allele, DP4 is not suitable for 1/2
        GT = var.genotypes[0]  # first sample
        if not (GT[0] == 0 and GT[1] == 1):
            continue

        DP = var.format('DP')[0][0]
        DP4 = (
            var.format('RDF')[0][0],
            var.format('RDR')[0][0],
            var.format('ADF')[0][0],
            var.format('ADR')[0][0]
        )
        # print(DP, DP4)
        MAF = (DP4[0]+DP4[1])/sum(DP4)
        MAF = 1 - MAF if MAF > 0.5 else MAF
        data.append((
            var.CHROM,
            var.end,
            DP,
            DP4[0], DP4[1], DP4[2], DP4[3],
            MAF
        ))
    return data

in_vcf = sys.argv[1]
handle = VCF(in_vcf)
SAMPLE = handle.samples[0]  # should be only one sample
minQUAL = 30

if handle.contains('bcftools_callVersion'):
    # input is generated by bcftools
    data = parse_vcf_bcftools(handle, minQUAL)
elif handle.contains('source') and handle.get_header_type('source')['source'] == 'VarScan2':
    # input is generated by VarScan2
    data = parse_vcf_varscan2(handle, minQUAL)
else:
    raise IOError('Unknown input format.')

# filter DP? maybe filter afterward
# DP_median = statistics.median([x[2] for x in data])
# data = [x for x in data if x[2] < 1.5*DP_median and x[2] > 0.5*DP_median]

print('SAMPLE\tCHR\tPOS\tDP\tDP4_1\tDP4_2\tDP4_3\tDP4_4\tMAF')
for d in data:
    print('{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{:.2f}'.format(
        SAMPLE,
        d[0], d[1],
        d[2],
        d[3], d[4], d[5], d[6],
        d[7]*100
    ))
